#--echo ##########################################################
--connect (PROXY, $PROXY_IP, root, , , $PROXY_PORT, $PROXY_PORT)
--connection PROXY

--echo drop and create server on proxy
--disable_warnings
--disable_query_log
--disable_result_log

if (`select count(*) from mysql.servers where server_name='ora_backend1'`)
{
	DROP SERVER ora_backend1;
}
if (`select count(*) from mysql.servers where server_name='ora_backend2'`)
{
	DROP SERVER ora_backend2;
}
if (`select count(*) from mysql.servers where server_name='ora_backend1_db1'`)
{
	DROP SERVER ora_backend1_db1;
}
if (`select count(*) from mysql.servers where server_name='ora_backend1_db2'`)
{
	DROP SERVER ora_backend1_db2;
}
if (`select count(*) from mysql.servers where server_name='ora_backend2_db1'`)
{
	DROP SERVER ora_backend2_db1;
}
if (`select count(*) from mysql.servers where server_name='ora_backend2_db2'`)
{
	DROP SERVER ora_backend2_db2;
}

eval CREATE SERVER ora_backend1
  FOREIGN DATA WRAPPER oracle 
OPTIONS( 
  HOST '$ORA_BACKEND1_IP',
  PORT $ORA_BACKEND1_PORT,   
  DATABASE '$ORA_DATABASE',
  USER '$ORA_USER',
  PASSWORD '$ORA_PWD'
);

eval CREATE SERVER ora_backend2
  FOREIGN DATA WRAPPER oracle 
OPTIONS( 
  HOST '$ORA_BACKEND2_IP',
  PORT $ORA_BACKEND2_PORT,   
  DATABASE '$ORA_DATABASE',
  USER '$ORA_USER',
  PASSWORD '$ORA_PWD'
);

eval CREATE SERVER ora_backend1_db1 
  FOREIGN DATA WRAPPER oracle 
OPTIONS( 
  HOST '$ORA_BACKEND1_IP',
  PORT $ORA_BACKEND1_PORT,   
  DATABASE 'DB1',
  USER 'db1',
  PASSWORD 'abc123'
);

eval CREATE SERVER ora_backend1_db2
  FOREIGN DATA WRAPPER oracle 
OPTIONS( 
  HOST '$ORA_BACKEND1_IP',
  DATABASE 'DB2',
  USER 'db2',
  PASSWORD 'abc123'
);

eval CREATE SERVER ora_backend2_db1 
  FOREIGN DATA WRAPPER oracle 
OPTIONS( 
  HOST '$ORA_BACKEND2_IP',
  DATABASE 'DB1',
  USER 'db1',
  PASSWORD 'abc123'
);

eval CREATE SERVER ora_backend2_db2
  FOREIGN DATA WRAPPER oracle 
OPTIONS( 
  HOST '$ORA_BACKEND2_IP',
  DATABASE 'DB2',
  USER 'db2',
  PASSWORD 'abc123'
);

--enable_warnings
--enable_query_log
--enable_result_log

#--echo ##########################################################
#--echo drop and create user on backend1
SELECT SPIDER_DIRECT_SQL('drop user db1 cascade', '', 'srv "ora_backend1"');
SELECT SPIDER_DIRECT_SQL('create user db1 identified by abc123', '', 'srv "ora_backend1"');
SELECT SPIDER_DIRECT_SQL('grant dba to db1', '', 'srv "ora_backend1"');
SELECT SPIDER_DIRECT_SQL('drop user db2 cascade', '', 'srv "ora_backend1"');
SELECT SPIDER_DIRECT_SQL('create user db2 identified by abc123', '', 'srv "ora_backend1"');
SELECT SPIDER_DIRECT_SQL('grant dba to db2', '', 'srv "ora_backend1"');

#--echo drop and create user on backend2
SELECT SPIDER_DIRECT_SQL('drop user db1 cascade', '', 'srv "ora_backend2"');
SELECT SPIDER_DIRECT_SQL('create user db1 identified by abc123', '', 'srv "ora_backend2"');
SELECT SPIDER_DIRECT_SQL('grant dba to db1', '', 'srv "ora_backend2"');
SELECT SPIDER_DIRECT_SQL('drop user db2 cascade', '', 'srv "ora_backend2"');
SELECT SPIDER_DIRECT_SQL('create user db2 identified by abc123', '', 'srv "ora_backend2"');
SELECT SPIDER_DIRECT_SQL('grant dba to db2', '', 'srv "ora_backend2"');


--echo ##########################################################
#1.fed
#1)
--echo create remote table on backend1
SELECT SPIDER_DIRECT_SQL('create table s(sno 	int primary key,sname	varchar(50),sdept 	varchar(50),age 	int)', '', 'srv "ora_backend1_db1"');
SELECT SPIDER_DIRECT_SQL('create table c(cno 	int primary key,cname varchar(50),pcno 	int)', '', 'srv "ora_backend1_db1"');
SELECT SPIDER_DIRECT_SQL('create table sc(sno int,cno int,grade int)', '', 'srv "ora_backend1_db1"');

#2)
--echo create spider table on proxy
let test_table_s=fed_s;
let test_table_c=fed_c;
let test_table_sc=fed_sc;

let create_s_sql=create table fed_s(SNO 	int primary key,SNAME	varchar(50),SDEPT 	varchar(50),AGE 	int) 
CHARSET=utf8 ENGINE = SPIDER 
CONNECTION='wrapper "oracle", table "S", srv "ora_backend1_db1"';

let create_c_sql=create table fed_c(CNO 	int   primary key,CNAME varchar(50),PCNO 	int) 
CHARSET=utf8 ENGINE = SPIDER 
CONNECTION='wrapper "oracle", table "C", srv "ora_backend1_db1"';

let create_sc_sql=create table fed_sc(SNO int,CNO int,GRADE int) 
CHARSET=utf8 ENGINE = SPIDER 
CONNECTION='wrapper "oracle", table "SC", srv "ora_backend1_db1"';

#3)

let spider_casual_read_value=0;
let spider_bgs_mode_value=0;
let test_des='fed_s no bgs';
--source multi_table_sql.inc

let spider_casual_read_value=1;
let spider_bgs_mode_value=2;
let test_des='fed_s bgs';
--source multi_table_sql.inc

##########################################################################
#2	share_range
#1)
--echo create remote table on backend1
SELECT SPIDER_DIRECT_SQL('create table share_range_s(sno 	int primary key,sname	varchar(50),sdept 	varchar(50),age 	int)', '', 'srv "ora_backend1_db1"');
SELECT SPIDER_DIRECT_SQL('create table share_range_c(cno 	int primary key,cname varchar(50),pcno 	int)', '', 'srv "ora_backend1_db1"');
SELECT SPIDER_DIRECT_SQL('create table share_range_sc(sno int,cno int,grade int)', '', 'srv "ora_backend1_db1"');

--echo create remote table on backend2
SELECT SPIDER_DIRECT_SQL('create table share_range_s(sno 	int primary key,sname	varchar(50),sdept 	varchar(50),age 	int)', '', 'srv "ora_backend2_db1"');
SELECT SPIDER_DIRECT_SQL('create table share_range_c(cno 	int primary key,cname varchar(50),pcno 	int)', '', 'srv "ora_backend2_db1"');
SELECT SPIDER_DIRECT_SQL('create table share_range_sc(sno int,cno int,grade int)', '', 'srv "ora_backend2_db1"');


#2)
--echo create spider table on proxy

let test_table_s=share_range_s;
let test_table_c=share_range_c;
let test_table_sc=share_range_sc;

let create_s_sql=create table $test_table_s(SNO 	int primary key,SNAME	varchar(50),SDEPT 	varchar(50),AGE 	int) 
ENGINE=SPIDER partition by range(SNO) 
 (
partition pt1 values less than (2000) 
comment ' wrapper "oracle", table "SHARE_RANGE_S", srv "ora_backend1_db1"',
partition pt2 values less than maxvalue 
comment ' wrapper "oracle", table "SHARE_RANGE_S", srv "ora_backend2_db1"');

let create_c_sql=create table $test_table_c(CNO 	int   primary key,CNAME varchar(50),PCNO 	int) 
ENGINE=SPIDER partition by range(CNO) 
 (
partition pt1 values less than (50) 
comment ' wrapper "oracle", table "SHARE_RANGE_C", srv "ora_backend1_db1"',
partition pt2 values less than maxvalue 
comment ' wrapper "oracle", table "SHARE_RANGE_C", srv "ora_backend2_db1"');

let create_sc_sql=create table $test_table_sc(SNO int,CNO int,GRADE int) 
ENGINE=SPIDER partition by KEY(CNO) 
 (
partition pt1 comment ' wrapper "oracle", table "SHARE_RANGE_SC", srv "ora_backend1_db1"',
partition pt2 comment ' wrapper "oracle", table "SHARE_RANGE_SC", srv "ora_backend2_db1"');

#3)
let spider_casual_read_value=0;
let spider_bgs_mode_value=0;
let test_des='share_range_s no bgs';
--source multi_table_sql.inc

let spider_casual_read_value=1;
let spider_bgs_mode_value=2;
let test_des='share_range_s bgs';
--source multi_table_sql.inc

##########################################################################
##########################################################################
#4.fed_ha
#1)
--echo create remote table on backend1
SELECT SPIDER_DIRECT_SQL('create table s_ha(sno 	int primary key,sname	varchar(50),sdept 	varchar(50),age 	int)', '', 'srv "ora_backend1_db1"');
SELECT SPIDER_DIRECT_SQL('create table c_ha(cno 	int primary key,cname varchar(50),pcno 	int)', '', 'srv "ora_backend1_db1"');
SELECT SPIDER_DIRECT_SQL('create table sc_ha(sno int,cno int,grade int)', '', 'srv "ora_backend1_db1"');


--echo create remote table on backend2
SELECT SPIDER_DIRECT_SQL('create table s_ha(sno 	int primary key,sname	varchar(50),sdept 	varchar(50),age 	int)', '', 'srv "ora_backend2_db2"');
SELECT SPIDER_DIRECT_SQL('create table c_ha(cno 	int primary key,cname varchar(50),pcno 	int)', '', 'srv "ora_backend2_db2"');
SELECT SPIDER_DIRECT_SQL('create table sc_ha(sno int,cno int,grade int)', '', 'srv "ora_backend2_db2"');



#2)
--echo create spider table on proxy

let test_table_s=fed_ha_s;
let test_table_c=fed_ha_c;
let test_table_sc=fed_ha_sc;

let create_s_sql=create table fed_ha_s(SNO 	int primary key,SNAME	varchar(50),SDEPT 	varchar(50),AGE 	int) 
CHARSET=utf8 ENGINE = SPIDER 
CONNECTION='wrapper "oracle", table "S_HA", srv "ora_backend1_db1 ora_backend2_db2"';

let create_c_sql=create table fed_ha_c(CNO 	int   primary key,CNAME varchar(50),PCNO 	int) 
CHARSET=utf8 ENGINE = SPIDER 
CONNECTION='wrapper "oracle", table "C_HA", srv "ora_backend1_db1 ora_backend2_db2"';

let create_sc_sql=create table fed_ha_sc(SNO int,CNO int,GRADE int) 
CHARSET=utf8 ENGINE = SPIDER 
CONNECTION='wrapper "oracle", table "SC_HA", srv "ora_backend1_db1 ora_backend2_db2"';

#3)
let spider_casual_read_value=0;
let spider_bgs_mode_value=0;
let test_des='fed_ha_s no bgs';
--source multi_table_sql.inc

let spider_casual_read_value=1;
let spider_bgs_mode_value=2;
let test_des='fed_ha_s bgs';
--source multi_table_sql.inc

##########################################################################
#4.share_range_ha
#1)
--echo create remote table on backend1
SELECT SPIDER_DIRECT_SQL('create table share_range_ha_s(sno 	int primary key,sname	varchar(50),sdept 	varchar(50),age 	int)', '', 'srv "ora_backend1_db1"');
SELECT SPIDER_DIRECT_SQL('create table share_range_ha_c(cno 	int primary key,cname varchar(50),pcno 	int)', '', 'srv "ora_backend1_db1"');
SELECT SPIDER_DIRECT_SQL('create table share_range_ha_sc(sno int,cno int,grade int)', '', 'srv "ora_backend1_db1"');
SELECT SPIDER_DIRECT_SQL('create table share_range_ha_s(sno 	int primary key,sname	varchar(50),sdept 	varchar(50),age 	int)', '', 'srv "ora_backend1_db2"');
SELECT SPIDER_DIRECT_SQL('create table share_range_ha_c(cno 	int primary key,cname varchar(50),pcno 	int)', '', 'srv "ora_backend1_db2"');
SELECT SPIDER_DIRECT_SQL('create table share_range_ha_sc(sno int,cno int,grade int)', '', 'srv "ora_backend1_db2"');


--echo create remote table on backend2
SELECT SPIDER_DIRECT_SQL('create table share_range_ha_s(sno 	int primary key,sname	varchar(50),sdept 	varchar(50),age 	int)', '', 'srv "ora_backend2_db1"');
SELECT SPIDER_DIRECT_SQL('create table share_range_ha_c(cno 	int primary key,cname varchar(50),pcno 	int)', '', 'srv "ora_backend2_db1"');
SELECT SPIDER_DIRECT_SQL('create table share_range_ha_sc(sno int,cno int,grade int)', '', 'srv "ora_backend2_db1"');
SELECT SPIDER_DIRECT_SQL('create table share_range_ha_s(sno 	int primary key,sname	varchar(50),sdept 	varchar(50),age 	int)', '', 'srv "ora_backend2_db2"');
SELECT SPIDER_DIRECT_SQL('create table share_range_ha_c(cno 	int primary key,cname varchar(50),pcno 	int)', '', 'srv "ora_backend2_db2"');
SELECT SPIDER_DIRECT_SQL('create table share_range_ha_sc(sno int,cno int,grade int)', '', 'srv "ora_backend2_db2"');


#2)
--echo create spider table on proxy
let test_table_s=share_range_ha_s;
let test_table_c=share_range_ha_c;
let test_table_sc=share_range_ha_sc;

let create_s_sql=create table $test_table_s(SNO 	int primary key,SNAME	varchar(50),SDEPT 	varchar(50),AGE 	int) 
ENGINE=SPIDER partition by range(SNO) 
 (
partition pt1 values less than (2000) 
comment ' wrapper "oracle", table "SHARE_RANGE_HA_S", srv "ora_backend1_db1 ora_backend2_db2"',
partition pt2 values less than maxvalue 
comment ' wrapper "oracle", table "SHARE_RANGE_HA_S", srv "ora_backend2_db1 ora_backend1_db2"');

let create_c_sql=create table $test_table_c(CNO 	int   primary key,CNAME varchar(50),PCNO 	int) 
ENGINE=SPIDER partition by range(CNO) 
 (
partition pt1 values less than (50) 
comment ' wrapper "oracle", table "SHARE_RANGE_HA_C", srv "ora_backend1_db1 ora_backend2_db2"',
partition pt2 values less than maxvalue 
comment ' wrapper "oracle", table "SHARE_RANGE_HA_C", srv "ora_backend2_db1 ora_backend1_db2"');

let create_sc_sql=create table $test_table_sc(SNO int,CNO int,GRADE int) 
ENGINE=SPIDER partition by KEY(CNO) 
 (
partition pt1 comment ' wrapper "oracle", table "SHARE_RANGE_HA_SC", srv "ora_backend1_db1 ora_backend2_db2"',
partition pt2 comment ' wrapper "oracle", table "SHARE_RANGE_HA_SC", srv "ora_backend2_db1 ora_backend1_db2"');

#3)
let spider_casual_read_value=0;
let spider_bgs_mode_value=0;
let test_des='share_range_ha_s no bgs';
--source multi_table_sql.inc

let spider_casual_read_value=1;
let spider_bgs_mode_value=2;
let test_des='share_range_ha_s bgs';
--source multi_table_sql.inc
